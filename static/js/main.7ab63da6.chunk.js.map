{"version":3,"sources":["components/Task.jsx","components/Stage.jsx","components/Stages.jsx","App.js","serviceWorker.js","index.js"],"names":["Task","stageKey","index","task","className","draggable","onDragStart","e","ev","stage","taskId","console","log","dataTransfer","setData","name","Stage","props","useState","showNewCard","setShowNewCard","onDragOver","preventDefault","onDrop","fromStage","getData","id","title","tasks","map","key","onSubmit","FormData","target","get","taskname","value","addTaskToStage","style","maxWidth","type","form","placeholder","onClick","Stages","todo","inprogress","done","stages","setStages","_stages","fromStageTasks","toStageTasks","push","splice","_task","Object","keys","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7ab63da6.chunk.js","sourcesContent":["import React from 'react'\n\n/**\n * Component used render task name\n * @param {*} param0 \n */\nfunction Task({stageKey, index, task}) {\n  /**\n   * Used to store event data using datatransfer method\n   * which will be used in onDrop method\n   * @param {Object} ev \n   * @param {String} stage \n   * @param {Number} taskId \n   */\n  function onDragStart(ev, stage, taskId) {\n    console.log(stage, taskId);\n    ev.dataTransfer.setData(\"stage\", stage);\n    ev.dataTransfer.setData(\"id\", taskId);\n  }\n\n  return (\n    <div className=\"task p2 border1 rounded2 mb2\" draggable\n      onDragStart={(e) => onDragStart(e, stageKey, index)}\n    >\n      <div className=\"title\">{task.name}</div>\n    </div>\n  )\n}\n\nexport default Task\n","import React, {useState} from 'react'\nimport Task from './Task';\n\n/**\n * Stage component is used to list down all task names \n * @param {*} props \n */\nfunction Stage(props) {\n  const [showNewCard, setShowNewCard] = useState(false); //used to show input bo for new task\n\n  /**\n   * Used to collect form data and pass to parent addTaskToStage method\n   * to add the task into tasks list of given stage name.\n   * @param {*} e \n   */\n  function addTaskToStage(e) {\n    e.preventDefault();\n    let form = new FormData(e.target);\n    let task = form.get(\"taskname\");\n    console.log(task);\n    if (task) {  \n      e.target.taskname.value = \"\";\n      setShowNewCard(false);\n      props.addTaskToStage(props.stageKey, task);\n    }\n  }\n\n  function onDragOver(ev) {\n    ev.preventDefault();\n  }\n\n  function onDrop(ev, stage) {\n    let fromStage = ev.dataTransfer.getData(\"stage\");\n    let id = ev.dataTransfer.getData(\"id\");\n    props.onDrop(stage, fromStage, id);\n  }\n  return (\n    <div className=\"stage d-inline-block mx2\"\n      onDragOver={(e) => onDragOver(e, props.stageKey)}\n      onDrop={(e) => onDrop(e, props.stageKey)}\n    >\n      <div className=\"tasks-container border1 rounded2 p2\">\n      <div className=\"stage-header mb2\">{props.stage.title}</div>\n      <div className=\"tasks\">\n        {\n          props.stage.tasks.map((task, index) => (\n            <Task key={index} task={task} stageKey={props.stageKey} index={index} />\n          ))\n        }\n      </div>\n      {\n        !showNewCard ?\n          <div>\n            <button className=\"add-task w-100 my2 p2\"\n              onClick={() => setShowNewCard(true)}\n            >+ Add Task</button>\n          </div>\n          :\n          <div className=\"new-task my2\">\n            <form onSubmit={addTaskToStage} id=\"taskform\" >\n              <div className=\"form-group\" style={{ maxWidth: \"254px\" }}>\n                <textarea name=\"taskname\" type=\"text\" form=\"taskform\"\n                  className=\"w-100 border1 rounded2 p2 mb2\"\n                  placeholder=\"Enter a title for this card\" >          \n                </textarea>\n              </div>\n              <div className=\"form-group\">\n                <button className=\"create-task p2\">Add</button>\n              </div>\n            </form>\n          </div>\n      }\n      </div>\n    </div>\n  )\n}\n\nexport default Stage\n","import React, {useState} from 'react'\nimport Stage from './Stage';\n\nfunction Stages() {\n  const [stages, setStages] = useState({\n    todo: {\n      title: \"TODO\",\n      tasks: []\n    },\n    inprogress: {\n      title: \"IN PROGRESS\",\n      tasks: []\n    },\n    done: {\n      title: \"DONE\",\n      tasks: []\n    },\n  });\n\n  /**\n   * Used to remove task from dragged stage and add into dropped stage\n   * @param {String} stage \n   * @param {String} fromStage \n   * @param {Number} id \n   */\n  function onDrop(stage, fromStage, id) {\n    console.log(stage, fromStage, id);\n    let _stages = {...stages};\n    let fromStageTasks = [..._stages[fromStage].tasks];\n    let toStageTasks = [..._stages[stage].tasks];\n    \n    toStageTasks.push(fromStageTasks.splice(id, 1)[0]);\n    _stages[fromStage][\"tasks\"] = fromStageTasks;\n    _stages[stage][\"tasks\"] = toStageTasks;\n    setStages({..._stages});\n  }\n  \n  /**\n   * Used to add new task to tasks list of given stage \n   * @param {String} stage \n   * @param {String} task \n   */\n  function addTaskToStage(stage, task) {\n    let _stages = {...stages};\n    let toStageTasks = [..._stages[stage].tasks];\n    let _task = {};\n    _task[\"name\"] = task;\n    toStageTasks.push(_task);\n    _stages[stage][\"tasks\"] = toStageTasks;\n    setStages({..._stages});\n  }\n\n  return (\n    <div className=\"stages p1\">\n      <div className=\"stage-container\">\n      {\n        Object.keys(stages).map((stage, index) => (\n          <Stage key={stage} stage={stages[stage]} onDrop={onDrop} stageKey={stage} addTaskToStage={addTaskToStage} />\n        ))\n      }\n    </div>\n    </div>\n  )\n}\n\nexport default Stages\n","import React from 'react';\nimport './App.css';\nimport Stages from './components/Stages';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main>\n        <h2>List Making</h2>\n        <Stages />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}